/* text 
ctx.font = '48px serif';
ctx.fillText('Hello world', 10, 50);
*/

/* circle
ctx.beginPath();
ctx.arc(240, 160, 20, 0, Math.PI*2, false);
ctx.fillStyle = "green";
ctx.fill();
ctx.closePath();
*/

/*
class Plot {
    width; height; color;

    constructor(x, y, width, height, color="brown") {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.color = color;
    }

    draw() {
        ctx.beginPath();
        ctx.rect(this.x, this.y, this.x+this.width, this.y+this.height);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
    }
}
*/

/*
let plots = [];
for (let i = 0; i < 3; i++) {
    plots.push(new Plot(25+i*125, 25, 100, 100));
}
*/

// PLANT STUFF
/*
class Plant {
    constructor(x, y, img_names) {
        this.x = x;
        this.y = y;
        this.img_names = img_names;
        this.stage = 0;

        // idk what these are
        this.width = 50;
        this.height = 50; 
    }

    draw() {
        ctx.drawImage(this.img_names[this.stage], this.x, this.y);
    }

    grow() {
        if (this.stage !== this.img_names.length - 1 && randint(1, 100) === 1) {
            this.stage++;
        }
    }
}

class Plot {
    
    constructor(x, y, width, height, color, plants) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.color = color;
        this.plants = plants;
    }
    
    draw() {
        for (let plant of this.plants) {
            plant.draw();
        }
    }

    detect_collect(x, y) {
        for (let plant of this.plants) {
            if (between([x, y], [plant.x, plant.y], [plant.x+plant.width, plant.y+plant.height])) {
                return true;
            }
        }
        return false;
    }

    grow() {
        for (let plant of this.plants) {
            plant.grow();
        }
    }
        
}
*/

// GROWABLE ENTITY CLASSA

class GrowableEntity extends Entity {

    x; y; dx; dy;

    constructor(x, y, dx=0, dy=0, imgs, label=null) {
        super();
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this.img = img;
        this.label = label;
    }

    draw() {
        ctx.drawImage(this.img, this.x, this.y);

        if (this.label) {
            fill_text(this.label, this.x - parseInt(this.label.length/3*10), this.y - 20, 14, "white");
        }
    }

}